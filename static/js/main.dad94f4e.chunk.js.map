{"version":3,"sources":["components/Navbar.js","components/About.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","type","data-mdb-toggle","data-mdb-target","aria-controls","aria-expanded","aria-label","react_router_dom","to","title","id","about","onClick","toggleMode","role","About","_useState","useState","backgroundColor","color","border","_useState2","Object","slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btnText","btnSetText","_useState5","_useState6","btnTextColor","setBtnTextColor","style","aria-labelledby","data-mdb-parent","Textform","text","setText","htmlFor","heading","value","onChange","e","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","defaultProps","Alert","height","alert","class","word","lower","charAt","slice","Captialize","msg","App","setMode","body","setAlert","message","setTimeout","Fragment","components_Alert","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.dad94f4e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-sm navbar-${props.mode} bg-${props.mode}`}>\r\n      {/* <!-- Container wrapper --> */}\r\n      <div className=\"container-fluid\">\r\n        {/* <!-- Toggle button --> */}\r\n        <button\r\n          className=\"navbar-toggler\" type=\"button\" data-mdb-toggle=\"collapse\" data-mdb-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" >\r\n          <i className=\"fas fa-bars\"></i>\r\n        </button>\r\n\r\n        <Link className=\"navbar-brand mt-2 mt-lg-0 fw-bold\" to=\"#\">{props.title}</Link>\r\n        {/* <!-- Collapsible wrapper --> */}\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          {/* <!-- Navbar brand --> */}\r\n          {/* <Link className=\"navbar-brand mt-2 mt-lg-0 fw-bold\" to=\"/\">{props.title}</Link> */}\r\n\r\n          {/* <!-- Left links --> */}\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" to=\"/\">Home</Link>\r\n              {/* <a className=\"nav-link active\" href=\"#\">Home</a> */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n            </li>\r\n          </ul>\r\n          {/* <!-- Left links --> */}\r\n          <div className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <p className='fw-bold'>Enable DarkMode</p>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      {/* <form className=\"d-flex input-group w-auto mr-4\">\r\n        <input\r\n          type=\"search\" className=\"form-control rounded\" placeholder=\"Search\" aria-label=\"Search\"\r\n          aria-describedby=\"search-addon\"\r\n        />\r\n        <span className=\"input-group-text border-0\" id=\"search-addon\">\r\n          <i className=\"fas fa-search\"></i>\r\n        </span>\r\n      </form> */}\r\n\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n  title: \"set title here\",\r\n  about: \"About\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState({\r\n        backgroundColor: \"white\",\r\n        color: \"black\",\r\n        border: \"2px solid white\"\r\n    })\r\n    const [btnText, btnSetText] = useState(\"Enable Dark Mode\");\r\n    const [btnTextColor, setBtnTextColor] = useState(\"btn btn-dark my-4\");\r\n    const changeMode = () => {\r\n        // console.log(\"1st\")\r\n        if (myStyle.color === \"black\") {\r\n            // console.log(\"inside if\")\r\n            setMyStyle({\r\n                backgroundColor: \"black\",\r\n                color: \"white\",\r\n                border: \"2px solid white\"\r\n            })\r\n            btnSetText(\"Enable Light Mode\");\r\n            setBtnTextColor(\"btn btn-light my-4\")\r\n        }\r\n        else {\r\n            // console.log(\"inside else\")\r\n            setMyStyle({\r\n                backgroundColor: \"white\",\r\n                color: \"black\",\r\n                border: \"2px solid white\"\r\n            })\r\n            btnSetText(\"Enable Dark Mode\");\r\n            setBtnTextColor(\"btn btn-dark my-4\");\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"mt-5\">\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button\r\n                            className=\"accordion-button\"\r\n                            type=\"button\"\r\n                            data-mdb-toggle=\"collapse\"\r\n                            data-mdb-target=\"#collapseOne\"\r\n                            aria-expanded=\"true\"\r\n                            aria-controls=\"collapseOne\"\r\n                            style={myStyle}\r\n                        >\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-mdb-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is hidden by default,\r\n                            until the collapse plugin adds the appropriate classes that we use to style each\r\n                            element. These classes control the overall appearance, as well as the showing and\r\n                            hiding via CSS transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just about any HTML\r\n                            can go within the <strong>.accordion-body</strong>, though the transition does\r\n                            limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button\r\n                            className=\"accordion-button collapsed\"\r\n                            type=\"button\"\r\n                            data-mdb-toggle=\"collapse\"\r\n                            data-mdb-target=\"#collapseTwo\"\r\n                            aria-expanded=\"false\"\r\n                            aria-controls=\"collapseTwo\"\r\n                            style={myStyle}\r\n                        >\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-mdb-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by\r\n                            default, until the collapse plugin adds the appropriate classes that we use to\r\n                            style each element. These classes control the overall appearance, as well as the\r\n                            showing and hiding via CSS transitions. You can modify any of this with custom CSS\r\n                            or overriding our default variables. It's also worth noting that just about any\r\n                            HTML can go within the <strong>.accordion-body</strong>, though the transition\r\n                            does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button\r\n                            className=\"accordion-button collapsed\"\r\n                            type=\"button\"\r\n                            data-mdb-toggle=\"collapse\"\r\n                            data-mdb-target=\"#collapseThree\"\r\n                            aria-expanded=\"false\"\r\n                            aria-controls=\"collapseThree\"\r\n                            style={myStyle}\r\n                        >\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-mdb-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default,\r\n                            until the collapse plugin adds the appropriate classes that we use to style each\r\n                            element. These classes control the overall appearance, as well as the showing and\r\n                            hiding via CSS transitions. You can modify any of this with custom CSS or\r\n                            overriding our default variables. It's also worth noting that just about any HTML\r\n                            can go within the <strong>.accordion-body</strong>, though the transition does\r\n                            limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className={btnTextColor} onClick={changeMode}>{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n    const clearOnClick = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Cleared\", \"success\");\r\n    }\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was Clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        // console.log(\"Uppercase was Clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (e) => {\r\n        // console.log(\"On Change\");\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const copyText = () => {\r\n        // console.log(\"I am copy\");\r\n        let text = document.getElementById(\"exampleFormControlTextarea1\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Text Copied To Clipboard\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Space Cleared\", \"success\");\r\n    }\r\n    const [text, setText] = useState(\"\");\r\n    return (\r\n        <main>\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"exampleFormControlTextarea1\" className={`form-label fw-bold text-${props.mode === \"light\" ? \"black\" : \"white\"} `}>{props.heading}</label>\r\n                <textarea className={`form-control`} style={{ backgroundColor: props.mode === \"light\" ? \"white\" : \"#504545\", color: props.mode === \"light\" ? \"black\" : \"white\" }} value={text} onChange={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length === 0} className=\"btn btn-danger\" onClick={handleUpClick}>lowercase to uppercase</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-success\" onClick={handleLoClick}>uppercase to lowercase</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-warning\" onClick={clearOnClick}>clear</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-dark\" onClick={copyText}>Copy Text</button>\r\n            <button disabled={text.length === 0} className=\"btn btn-secondary\" onClick={handleExtraSpaces}>Remove Extra Space</button>\r\n\r\n            <div className={`container my-3 text-${props.mode === \"light\" ? \"black\" : \"white\"}`}>\r\n                <h1>Your Text Summary</h1>\r\n                <p>{text.split(\" \").filter((e) => { return e.length !== 0 }).length} words and {text.length} characters</p>\r\n                <p>{.008 * (text.split(\" \").filter((e) => { return e.length !== 0 }).length)} minutes to read</p>\r\n                <h2>Preview</h2>\r\n\r\n                <p>{text.length > 1 ? text : \"write something to preview\"}</p>\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const Captialize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '50px' }}>\r\n            {props.alert && <div class=\"alert alert-primary\" role=\"alert\">\r\n                <strong>{Captialize(props.alert.type)}</strong> : {props.alert.msg}\r\n            </div>}\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Alert\r\n\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport About from './components/About';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const body = document.body;\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      body.style.backgroundColor = \"#1c289a\";\n      showAlert(\"Dark Mode Enabled\", \"success\");\n      document.title = \"Home-Dark Mode\";\n\n      // setInterval(() => {\n      //   document.title = \"Dark Mode is Amazing\";\n      // }, 500);\n\n      // setInterval(() => {\n      //   document.title = \"Download it Now\";\n      // }, 1000);\n    }\n    else {\n      setMode(\"light\");\n      body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode Enabled\", \"success\");\n      document.title = \"Home-Light Mode\";\n    }\n  }\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container mt-3\">\n          <Routes>\n            <Route exact path=\"/about\" element={<About />}> </Route>\n            <Route exact path=\"/\" element={<Textform showAlert={showAlert} heading=\"Enter your text to Analyse below\" mode={mode} />}></Route>\n          </Routes>\n        </div>\n      </Router>\n      {/* <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container mt-3\">\n        <Textform showAlert={showAlert} heading=\"Enter your text to Analyse below\" mode={mode} />\n      </div> */}\n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}